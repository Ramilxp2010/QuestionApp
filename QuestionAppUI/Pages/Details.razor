@page "/Details/{Id}"
@using Radzen.Blazor
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

@inject IUserData userData
@inject IQuestionData questionData
@inject IStatusData statusData
@inject IAnswerData answerData

<h1 class="page-heading text-uppercase mb-4">Question details</h1>

<div class="row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if (question is not null)
        {
            <div class="row question-detail-row">
                <div class="col-11 question-detail">
                    <div>
                        <div class="@GetVoteClass()" @onclick="(()=>UpVote())">
                            <div class="text-uppercase">@GetUpvoteTopText()</div>
                            <span class="oi oi-caret-top entry-upvote"></span>
                            <div class="text-uppercase">@GetUpvoteBottomText()</div>
                        </div>
                        <div class="question-detail-date">
                            <div>@question.DateCreated.ToString("dd.MM.yyyy")</div>
                        </div>
                    </div>
                    <div class="question-detail-text">
                        <div class="fw-bold mb-2 question-detail-question">@question.Question</div>
                        <div class="mb-2 question-detail-autor">@question.Author.DisplayName</div>
                        <div class="mb-2">@question.Description</div>
                        <div class="question-entry-text-category">
                            @question.Category.Name
                        </div>
                    </div>
                </div>
                <div class="col-1 close-btn-section">
                    <button class="btn btn-close" @onclick ="ClosePage"></button>
                </div>
            </div>

            <div class="fw-bold answer-count">@GetAnswerCountStr()</div>
        }
    </div>
</div>
<div class="row justify-content-center detail-form">
    <div class="col-xl-8 form-layout form-layout-editor">
        <div class="answer-placeholder">Add your answer</div>
        <RadzenHtmlEditor class="@GetEditorClass()" @bind-Value=@inputAnswer UploadUrl="upload/image" @onclick="ChangeEditorSize">
            <RadzenHtmlEditorUndo />
            <RadzenHtmlEditorRedo />
            <RadzenHtmlEditorSeparator />
            <RadzenHtmlEditorBold />
            <RadzenHtmlEditorItalic />
            <RadzenHtmlEditorUnderline />
            <RadzenHtmlEditorStrikeThrough />
            <RadzenHtmlEditorSeparator />
            <RadzenHtmlEditorColor />
            <RadzenHtmlEditorBackground />
            <RadzenHtmlEditorRemoveFormat />
        </RadzenHtmlEditor>
        <div class="right-children">
            <button class="btn btn-main btn-md text-uppercase" type="button" @onclick="SaveAnswer">Suggest</button>
        </div>
    </div>
</div>

@if (answers != null && answers.Any())
{
    foreach (var answer in answers)
    {
        <div class="row justify-content-center detail-form answer-detail">
            <div class="col-xl-8 col-lg-10 form-layout">
                <div class="row justify-content-start answer-header">
                    <div class="col-sm-3 answer-author">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                            <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z" />
                            <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z" />
                        </svg>
                        <a href="#">@GetAnswerAutorName(answer)</a>
                    </div>
                    <div class="col-4 answer-date">
                        @answer.CreateDate.ToString("dd.MM.yyyy")
                    </div>
                </div>
                <input type="checkbox" class="read-more-checker" id="read-more-checker" />
                <div class="limiter">
                    <div class="fw-bold mb-2">@((MarkupString)answer.Answer)</div>
                    <div class="bottom"></div>
                </div>
                <label for="read-more-checker" class="read-more-button"></label>
            </div>
        </div>
    }
}

@if (question?.Status is not null)
{
    <div class="row justify-content-center detail-form">
        <div class="col-xl-8 col-lg-10 question-results form-layout">
            <div class="@GetStatusClass()"></div>
            <div class="question-detail-status-section">
                <div class="question-deatail-status fw-bold mb-2 question-detail-question">
                    @question.Status.Name
                </div>
                <div class="question-detail-answer">
                    @((MarkupString)question.Answer)
                </div>
            </div>
        </div>
    </div>
}

@if (question != null)
{
    <AuthorizeView Roles="Admin">
        <div class="row justify-content-center detail-form">
            <div class="col-xl-8 col-lg-10 form-layout admin-details">
                <div>
                    <div class="question-detail-status fw-bold mb-2 question-detail-question">
                        Set Status
                    </div>
                    @if (string.IsNullOrEmpty(settingStatus))
                    {
                        <div class="admin-set-statuses">
                            <button @onclick="@(()=> settingStatus = "completed")"
                            class="btn question-entry-text-category btn-archive bnt-status-completed">
                                completed
                            </button>
                            <button @onclick="@(()=> settingStatus = "upcoming")"
                            class="btn question-entry-text-category btn-archive bnt-status-upcoming">
                                upcoming
                            </button>
                            <button @onclick="@(()=> settingStatus = "watching")"
                            class="btn question-entry-text-category btn-archive bnt-status-watching">
                                watching
                            </button>
                            <button @onclick="@(()=> settingStatus = "dismissed")"
                            class="btn question-entry-text-category btn-archive bnt-status-dismissed">
                                dismissed
                            </button>
                        </div>
                    }
                    else if (settingStatus == "completed")
                    {
                        <div> 
                            <input @bind="urlText" class="form-control rounded-control" type="text"
                            placeholder="Url" aria-label="Content Url"></input>
                        </div>
                        <div class="question-entry-bottom">
                            <button class="btn btn-archive-confirm" @onclick="CompleteSetStatus">
                                confirm
                            </button>
                            <button class="btn btn-archive-reject" @onclick="(()=>settingStatus = null)">
                                cancel
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="question-entry-bottom">
                            <button class="btn btn-archive-confirm" @onclick="CompleteSetStatus">
                                confirm
                            </button>
                            <button class="btn btn-archive-reject" @onclick="(()=>settingStatus = null)">
                                cancel
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </AuthorizeView>   
}

@code {
    [Parameter]
    public string Id { get; set; }

    private UserModel loggedUser;
    private QuestionModel question;

    private List<StatusModel> statuses;
    private List<AnswerModel> answers;
    private string settingStatus;
    private string urlText = "";

    private string inputAnswer = "";
    bool isEditorClicked = false;

    protected async override Task OnInitializedAsync()
    {
        question = await questionData.GetQuestion(Id);
        loggedUser = await authProvider.GetUserFromAuth(userData);
        statuses = await statusData.GetAllStatuses();
        answers = await answerData.GetQuestionAnswers(question.Id);
        answers = answers.Where(x => x.IsApproved || x.Author.Id == loggedUser?.Id).ToList();

    }

    private string GetAnswerCountStr()
    {
        int count = 0;
        if (answers != null && answers.Any())
        {
            count = answers.Count;
        }

        return count == 0 
        ? $"No Answers yet" 
        : count == 1 
        ? $"{count} Answer" 
        : $"{count} Answers";
    }

    private void ChangeEditorSize()
    {
        if (string.IsNullOrEmpty(inputAnswer))
            isEditorClicked = true;

    }

    private string GetEditorClass()
    {
        return isEditorClicked ? "radzen-editor radzen-editor-clicked" : "radzen-editor";
    }

    private async Task CompleteSetStatus()
    {
        switch (settingStatus)
        {
            case "completed":
                if (string.IsNullOrWhiteSpace(urlText))
                {
                    return;
                }
                question.Status = statuses.Where(s => s.Name.ToLower() == settingStatus.ToLower()).First();
                question.Answer = @"Added <a href='{urlText}' target='_blank'>{urlText}</a>";
                break;

            case "watching":
                question.Status = statuses.Where(s => s.Name.ToLower() == settingStatus.ToLower()).First();
                question.Answer = @"We see it";
                break;

            case "upcoming":
                question.Status = statuses.Where(s => s.Name.ToLower() == settingStatus.ToLower()).First();
                question.Answer = @"upcoming";
                break;

            case "dismissed":
                question.Status = statuses.Where(s => s.Name.ToLower() == settingStatus.ToLower()).First();
                question.Answer = @"dismissed";
                break;
            default:
                return;

        }

        settingStatus = null;
        await questionData.UpdateQuestion(question);
    }

    protected void ClosePage()
    {
        navManager.NavigateTo("/");   
    }

    private string GetUpvoteTopText()
    {
        //TODO
        return question.UserVotes?.Count > 0
        ? question.UserVotes?.Count.ToString("00")
        : question.Author.Id == loggedUser?.Id
        ? "Awaiting"
        : "Click To";
    }

    private string GetUpvoteBottomText()
    {
        return question.UserVotes?.Count > 1 ? "Upcotes" : "Upvote";
    }

    private async Task UpVote()
    {
        if (loggedUser is null)
        {
            navManager.NavigateTo("/Identity/Account/Login", true);
            return;
        }

        if (question.Author.Id != loggedUser.Id)
        {
            if (!question.UserVotes.Add(loggedUser.Id))
            {
                question.UserVotes.Remove(loggedUser.Id);
            }

            await questionData.UpVoeted(question.Id, loggedUser.Id);
        }
    }

    private string GetVoteClass()
    {
        if (question.UserVotes == null || question.UserVotes.Count == 0)
        {
            return "question-detail-no-votes";
        }
        else if (question.UserVotes.Contains(loggedUser?.Id))
        {
            return "question-detail-voted";
        }
        else
        {
            return "question-detail-not-voted";
        }
    }

    private string GetStatusClass()
    {
        if (question == null || question.Status == null)
        {
            return "question-detail-status-none";
        }

        string output = question.Status.Name switch
        {
            "Completed" => "question-detail-status-complated",
            "Wathing" => "question-detail-status-wathing",
            "Upcoming" => "question-detail-status-upcoming",
            "Dismissed" => "question-detail-status-dismissed",
            _ => "question-detail-status-none"
        };

        return output;
    }

    private async Task SaveAnswer()
    {
        if (loggedUser == null)
        {
            navManager.NavigateTo(Urls.LoginPath, true);
            return;
        }

        if (string.IsNullOrWhiteSpace(inputAnswer))
            return;

        var cachedUserAns = answers.FirstOrDefault(x => x.Author.Id == loggedUser.Id);
        if (cachedUserAns != null)
        {
            answers.Remove(cachedUserAns);
            cachedUserAns.Answer = inputAnswer;
            answers.Add(cachedUserAns);
            await answerData.UpdateAnswer(cachedUserAns);
            inputAnswer = "";
            return;
        }

        var userAnswer = new AnswerModel()
        {
            Answer = inputAnswer,
            Author = loggedUser,
            QuestionId = question.Id
        };

        answers.Add(userAnswer);
        await answerData.CreateAnswer(userAnswer);
        inputAnswer = "";
    }

    private string GetAnswerAutorName(AnswerModel answer)
    {
        return @answer.Author.Id != loggedUser?.Id 
        ? answer.Author.DisplayName 
        : "Your Answer";
    }
}
