@page "/AdminApproval"
@attribute [Authorize(Roles = "Admin")]
@inject IQuestionData questionData
@inject IUserData userData
@inject ICategoryData categoryData
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h1 class="page-heading text-uppercase mb-4">Pending Questions</h1>

<div class="row">
    <div class="question-count col-8 mt-2">@allQuestions?.Count Questions</div>
    <div class="col-4 close-btn-section">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>

@if (allQuestions is not null)
{
    foreach (var s in allQuestions)
    {
        <div class="row submissions">
            <div class="col-lg-2 col-md-3 col-sm-4">
                <button class="btn btn-approve" @onclick="(()=> ApproveQuestion(s))">Approve</button>
                <button class="btn btn-reject" @onclick="(()=> RejectQuestion(s))">Reject</button>
            </div>
            <div class="col-lg-10 col-md-9 col-sm-8">
                <div>
                    @if (currentEditingTitle == s.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@editedTitle" OnSubmit="(()=>SaveTitle(s))">
                            <InputText class="form-control approval-edit-field" @bind-Value="editedTitle"></InputText>
                            <button class="btn" type="submit">
                                <span class="oi oi-check submission-edit-approve"></span>
                            </button>
                            <button type="button" class="btn" @onclick="(()=> currentEditingTitle = string.Empty)">
                                <span class="oi oi-x submission-edit-reject"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Question
                        <span class="oi oi-pencil submission-edit-icon" @onclick="(()=>EditTitle(s))"></span>
                    }
                </div>
                @if (currentEditingCategories == s.Id)
                {
                    <div class="card">
                        <div class="card-body">
                            @foreach (var c in allCategories)
                            {
                                <div class="chip chip-md white-text example z-depth-2 mr-0 @GetTagClass(c)" @onclick="(() => ClickTag(c))">
                                    <i class="fas fa-tags"></i>
                                    &nbsp;&nbsp;@c.Name
                                    <i class="close white-text fas fa-times"></i>
                                </div>
                            }
                        </div>
                    </div>
                    <button class="btn" type="button" @onclick="(() => SaveCategories(s))">
                        <span class="oi oi-check submission-edit-approve"></span>
                    </button>
                    <button type="button" class="btn" @onclick="(()=> currentEditingCategories = string.Empty)">
                        <span class="oi oi-x submission-edit-reject"></span>
                    </button>
                }
                else
                {
                    <div class="card">
                        <div class="card-body">
                            @foreach (var c in s.Categories)
                            {
                                <div class="chip chip-md white-text example z-depth-2 mr-0 @GetTagClass(s, c)">
                                    <i class="fas fa-tags"></i>
                                    &nbsp;&nbsp;@c.Name
                                    <i class="close white-text fas fa-times"></i>
                                </div>
                            }
                        </div>
                    </div>
                    <span class="oi oi-pencil submission-edit-icon" @onclick="(()=>EditCategories(s))"></span>
                }
                <div>
                    @s.Author.DisplayName
                </div>
                <div>
                    @if (currentEditingDescription == s.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@editedDescription" OnSubmit="(()=>SaveDescription(s))">
                            <InputText class="form-control approval-edit-approve" @bind-Value="editedDescription"></InputText>
                            <button class="btn" type="submit">
                                <span class="oi oi-check submission-edit-approve"></span>
                            </button>
                            <button type="button" class="btn" @onclick="(()=> currentEditingDescription = string.Empty)">
                                <span class="oi oi-x submission-edit-reject"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Description
                        <span class="oi oi-pencil submission-edit-icon" @onclick="(()=>EditDescription(s))"></span>
                    }
                </div>
            </div>
        </div>
    }   
}

@code {
    private List<QuestionModel> allQuestions;
    private List<CategoryModel> allCategories;

    private QuestionModel editingModel;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string currentEditingDescription = "";
    private string editedDescription = "";
    private string currentEditingCategories = "";
    private HashSet<string> editedCategories = new HashSet<string>();

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;
        allQuestions = await questionData.GetAllQuestionsForApprove();
        allCategories = await categoryData.GetAllCategoies();
    }

    private async Task ApproveQuestion(QuestionModel question)
    {
        question.IsAproved = true;
        allQuestions.Remove(question);
        await questionData.UpdateQuestion(question);
    }

    private async Task RejectQuestion(QuestionModel question)
    {
        question.IsRejected = true;
        allQuestions.Remove(question);
        await questionData.UpdateQuestion(question);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");   
    }

    private void EditTitle(QuestionModel question)
    {
        editingModel = question;
        editedTitle = question.Question;
        currentEditingTitle = question.Id;
        currentEditingDescription = "";
    }

    private async Task SaveTitle(QuestionModel question)
    {
        currentEditingTitle = string.Empty;
        question.Question = editedTitle;
        await questionData.UpdateQuestion(question);
    }

    private void EditDescription(QuestionModel question)
    {
        editingModel = question;
        editedDescription = question.Description;
        currentEditingTitle = "";
        currentEditingDescription = question.Id;
    }

    private async Task SaveDescription(QuestionModel question)
    {
        currentEditingDescription = string.Empty;
        question.Description = editedDescription;
        await questionData.UpdateQuestion(question);
    }

    private void EditCategories(QuestionModel question)
    {
        editingModel = question;
        editedCategories = question.Categories.Select(x=>x.Id).ToHashSet<string>();
        currentEditingTitle = "";
        currentEditingDescription = "";
        currentEditingCategories = question.Id;
    }

    private string GetTagClass(CategoryModel category)
    {
        return editedCategories.Contains(category.Id)
        ? "success-color"
        : "";
    }

    private string GetTagClass(QuestionModel question, CategoryModel category)
    {
        return question.Categories.Any(x => x.Id == category.Id)
        ? "success-color"
        : "";
    }

    private void ClickTag(CategoryModel category)
    {
        if (!editedCategories.Add(category.Id))
            editedCategories.Remove(category.Id);
    }

    private async Task SaveCategories(QuestionModel question)
    {
        currentEditingCategories = null;
        question.Categories = allCategories.Where(x => editedCategories.Contains(x.Id)).ToList();
        editedCategories.Clear();
        await questionData.UpdateQuestion(question);
    }
}
