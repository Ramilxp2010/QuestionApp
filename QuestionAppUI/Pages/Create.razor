@page "/Create"
@attribute [Authorize]
@using QuestionAppUI.Components
@using QuestionAppUI.Models;
@inject ICategoryData categoryData
@inject IQuestionData questionData
@inject IUserData userData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

<h1 class="page-heading text-uppercase mb-4">Make a question</h1>

<QuestionEditor EditableQuestion="@questionVM" OnCloseCallback="ClosePage" OnSubmitCallback="CreateQuestion">
</QuestionEditor>

@code {
    private QuestionVM questionVM = new();
    private List<CategoryModel> categories;
    private UserModel loggedUser;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategoies();

        loggedUser = await authProvider.GetUserFromAuth(userData);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");   
    }

    private async Task CreateQuestion(QuestionVM editedQuestionVM)
    {
        QuestionModel question = new QuestionModel()
        {
            Question = editedQuestionVM.Question,
            Description = editedQuestionVM.Description,
            Author = new BasicUserModel(loggedUser),
            Categories = categories.Where(x => editedQuestionVM.CategoryIds.Any(c=>c == x.Id)).ToList()
        };

        if (question.Categories is null)
        {
            editedQuestionVM.CategoryIds = new HashSet<string>();
            return;
        }

        await questionData.CreateQuestion(question);
        question = null;
        ClosePage();
    }
}
